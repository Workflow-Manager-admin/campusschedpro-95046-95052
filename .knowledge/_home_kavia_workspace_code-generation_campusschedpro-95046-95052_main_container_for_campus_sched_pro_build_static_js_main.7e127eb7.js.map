{"is_source_file": false, "format": "", "description": "", "external_files": ["react-is", "../connect/selectorFactory", "../connect/mapDispatchToProps", "../connect/mapStateToProps", "../connect/mergeProps", "../utils/Subscription", "../utils/useIsomorphicLayoutEffect", "../utils/shallowEqual", "../utils/warning", "../utils/useSyncExternalStore", "../utils/bindActionCreators", "@mui/utils/deepmerge", "@mui/utils/generateUtilityClass", "@mui/utils/generateUtilityClasses", "@mui/system/createTheme", "@mui/system/styleFunctionSx", "@mui/utils/useForkRef", "@mui/utils/resolveProps", "@mui/utils/capitalize", "@mui/utils/setPrototypeOf", "@mui/utils/chainPropTypes", "@mui/system/colorManipulator", "@mui/utils/integerPropType", "@mui/utils/composeClasses", "@mui/utils/formatMuiErrorMessage", "@mui/utils/useTimeout", "@mui/utils/elementAcceptingRef", "@mui/styled-engine", "@mui/styled-engine/createStyled", "./createTheme", "./createPalette", "./createTypography", "./createTransitions", "./zIndex", "./createMixins", "./defaultTheme", "./identifier", "../styles/styled", "../styles/useTheme", "../styles/useThemeProps", "../styles/getThemeProps", "../utils/resolveProps", "../styles/useThemeWithoutDefault", "../styles/createTheme", "../utils/useForkRef", "../utils/capitalize", "./paperClasses", "./SnackbarContent/snackbarContentClasses", "./utils/reflow", "./transitions/utils", "../utils/extractEventHandlers", "../base/ClickAwayListener", "../base/useSnackbar", "../Grow", "../SnackbarContent", "../styles/styleFunctionSx", "../utils/useTimeout", "./snackbarClasses", "./snackbarContentClasses", "./buttonBaseClasses", "./iconButtonClasses", "./svgIconClasses", "../utils/integerPropType"], "external_methods": ["isValidElementType", "isContextConsumer", "hoistStatics", "generateUtilityClass", "generateUtilityClasses", "deepmerge", "useForkRef", "resolveProps", "capitalize", "setPrototypeOf", "chainPropTypes", "alpha", "getOverlayAlpha", "getContrastRatio", "getContrastText", "createTheme", "createPalette", "createTypography", "createTransitions", "createMixins", "getPaperUtilityClass", "getSnackbarContentUtilityClass", "useTheme", "useThemeWithoutDefault", "useThemeProps"], "published": ["connect", "useSelector", "createSelectorHook", "initializeConnect", "useSyncExternalStore", "setBatch", "getBatch", "ReactReduxContext", "notInitialized", "createTheme", "createPalette", "createTypography", "createTransitions", "zIndex", "createMixins", "defaultTheme", "getPaperUtilityClass", "generateUtilityClass", "generateUtilityClasses", "getSnackbarContentUtilityClass", "useTheme", "useThemeWithoutDefault", "useThemeProps", "resolveProps"], "classes": [{"name": "MuiPaper", "description": "Utility class for Paper component styling, e.g., 'MuiPaper-root', 'MuiPaper-rounded', 'MuiPaper-elevation0'..."}, {"name": "MuiSnackbarContent", "description": "Utility classes for SnackbarContent styling such as 'root', 'message', 'action'."}, {"name": "MuiSnackbar", "description": "Utility class for Snackbar container, e.g., 'root, anchorOriginTopCenter, anchorOriginBottomLeft', etc."}, {"name": "MuiAlert", "description": "Utility classes for Alert component styling, including variants and severity-based classes."}, {"name": "MuiIconButton", "description": "Utility class for IconButton component styling, e.g., 'root', 'disabled', 'colorInherit', 'edgeStart', 'sizeSmall', etc."}, {"name": "MuiSvgIcon", "description": "Utility classes for SvgIcon styling, e.g., 'root', 'colorPrimary', 'fontSizeLarge', etc."}, {"name": "MuiSnackbar", "description": "Utility class for Snackbar container, e.g., 'root', 'anchorOriginTopCenter', 'anchorOriginBottomLeft', etc."}], "methods": [{"name": "is", "description": "Helper for Object.is to handle -0/+0 differentiation and NaN equality."}, {"name": "shallowEqual", "description": "Performs a shallow comparison of two objects, returning true if they are equivalent."}, {"name": "stringifyComponent", "description": "Attempts to serialize a React component or value for error messages."}, {"name": "useIsomorphicLayoutEffectWithArgs", "description": "Custom hook for effect that falls back between useLayoutEffect and useEffect based on environment."}, {"name": "captureWrapperProps", "description": "Captures and updates references to wrapper props and child props during render cycle."}, {"name": "subscribeUpdates", "description": "Handles subscribing a React component to Redux store updates, manages prop recalculations, and error handling."}, {"name": "strictEqual", "description": "Simple strict equality check returning boolean."}, {"name": "connect", "description": "Main Higher-Order Component to connect React components to Redux store, managing subscriptions, props mapping, and context."}, {"name": "mapStateToPropsFactory", "description": "Creates a factory function to process mapStateToProps argument."}, {"name": "mapDispatchToPropsFactory", "description": "Creates a factory function for mapDispatchToProps argument, handling objects and functions."}, {"name": "bindActionCreators", "description": "Wraps action creators with dispatch, allowing direct invocation in components."}, {"name": "wrapMapToPropsConstant", "description": "Wraps a constant mapToProps function, used for default or static props."}, {"name": "wrapMapToPropsFunc", "description": "Wraps a mapToProps function with proxies to detect dependencies and results."}, {"name": "mapStateToPropsFactory", "description": "Exports the factory for processing mapStateToProps argument."}, {"name": "mapDispatchToPropsFactory", "description": "Exports the factory for processing mapDispatchToProps argument."}, {"name": "mapDispatchToPropsFactory", "description": "Creates a factory function to process mapDispatchToProps argument, handling objects and functions."}, {"name": "Provider", "description": "React component that sets up the Redux store in context for nested components."}, {"name": "areInputsEqual", "description": "Custom hook to compare dependency arrays for memoization, similar to React's useMemo dependency check."}, {"name": "useMemoOne", "description": "Custom hook implementing memoization with dependency comparison, optimized for stable memoized values."}, {"name": "useCallbackOne", "description": "Custom hook optimizing callback memoization with dependencies."}, {"name": "invariant", "description": "Utility for runtime assertions with environment-sensitive error messages."}, {"name": "ErrorBoundary", "description": "React component for capturing JavaScript errors in rendering phase and handling error events related to drag-and-drop."}, {"name": "log", "description": "Logging utility for development warnings and errors with styled console messages."}, {"name": "warning", "description": "Warns developers of potential issues during development."}, {"name": "Provider", "description": "Wraps parts of the React app with context providing store, setup includes subscription for store updates."}, {"name": "getDroppableDisplaced", "description": "Calculates the displaced position of a droppable in response to scrolling."}, {"name": "isVisible$1", "description": "Determines if a draggable target is visible within a destination droppable considering viewport and displacement."}, {"name": "getImpact", "description": "Calculates the impact of a drag operation, including reordering and combining impacts based on position."}, {"name": "moveToNextPlace", "description": "Computes the next impact for moving an item within a droppable, on main or cross axes."}, {"name": "moveCrossAxis", "description": "Calculates impact on cross-axis movement (e.g., horizontal when dragging vertically)."}, {"name": "recomputePlaceholders", "description": "Recalculates placeholder sizes and positions for droppables based on current drag impact."}, {"name": "getImpact", "description": "Calculates the impact of a drag operation, including reordering and merging impacts based on position."}, {"name": "createTheme", "description": "Main function to create a custom Material UI theme with palette, typography, shadows, etc."}, {"name": "createPalette", "description": "Function to generate a color palette based on input colors and mode."}, {"name": "createTypography", "description": "Function to generate typography styles based on palette and configuration."}, {"name": "createTransitions", "description": "Utility to generate transition styles for animations."}, {"name": "createMixins", "description": "Function to create style mixins for consistent component styling."}, {"name": "getPaperUtilityClass", "description": "Generates utility class names for Paper component based on slots."}, {"name": "getSnackbarContentUtilityClass", "description": "Generates utility class names for SnackbarContent component."}, {"name": "useTheme", "description": "React hook to access the theme object from context."}, {"name": "useThemeWithoutDefault", "description": "Hook to get theme without default fallback."}, {"name": "useThemeProps", "description": "Hook to get theme-based props for a component."}, {"name": "resolveProps", "description": "Utility to merge default and provided props, handling component and slot props."}, {"name": "createMixins", "description": "Function to create style mixins for components."}], "calls": ["matchRoutes", "createLocation", "normalizeTo", "normalizeNavigateOptions", "getTargetMatch", "handleAction", "handleLoaders", "callDataStrategy", "startRedirectNavigation", "completeNavigation", "updateBlocker", "shouldBlockNavigation", "getInternalRouterError", "findNearestBoundary", "discoverRoutes", "createClientSideRequest", "mergeLoaderData", "setFetcherError", "abortFetcher", "markFetchRedirectsDone", "abortStaleFetchLoads", "callLoadersAndMaybeResolveData", "checkFogOfWar", "handleNavigational404", "normalizeRedirectLocation", "findRedirect", "getLoadingNavigation", "processLoaderData", "getActionDataForCommit", "getUpdatedActionData", "getLoadingFetcher", "getSubmittingFetcher", "updateFetcherState", "fetchControllers.set", "fetchControllers.delete", "startNavigation", "navigate", "revalidate", "deleteFetcher", "deleteBlocker", "convertRoutesToDataRoutes", "restoreAppliedTransitions", "persistAppliedTransitions", "Object.keys", "Object.prototype.hasOwnProperty", "createContext", "useContext", "useMemo", "useRef", "useCallback", "useEffect", "useLayoutEffect", "React.createElement", "warning", "hoistStatics", "isContextConsumer", "store.getState", "store.dispatch", "store.subscribe", "createSubscription", "combineReducers", "applyMiddleware", "compose", "createStore", "bindActionCreators", "JSON.stringify", "getRect", "expand", "offset", "shrink", "withScroll", "distance", "closest", "add", "subtract", "isEqual", "memoizeOne", "requestAnimationFrame", "cancelAnimationFrame", "render", "offsetRectByPosition", "getKnownActive", "getBestCrossAxisDroppable", "isWithin", "isPartiallyVisibleThroughFrame", "isTotallyVisibleThroughFrame", "getDroppableOver", "moveToNextPlace", "moveCrossAxis", "recomputePlaceholders", "scrollViewport", "getImpact"], "search-terms": ["main.7e127eb7.js.map", "source map", "JavaScript source map", "build/static/js", "minified JavaScript", "source map file", "main.7e127eb7.js", "React Router", "client-side routing", "route matching", "data loaders", "error handling", "source map-specific", "internal router logic", "route revalidation", "navigation blockers", "React-Redux", "connect HOC", "useSelector hook", "Redux store creation", "React context", "store subscription", "mapStateToProps", "mapDispatchToProps", "Source map", "react-redux internal mechanics", "redux middleware", "Source code snippets", "React hooks for store", "drag impact calculation", "droppable/displacement", "impact impact effects", "placeholder management", "viewport visibility", "cross-axis movement", "impact impact impact impact impact", "Material UI createTheme", "Palette configuration", "Typography theme", "Shadow definitions", "Component style overrides", "CSS-in-JS styling", "useTheme hook", "Component utility classes", "theme creation and customization", "Material UI system", "CSS transition helper", "react-transition-group", "zIndex configuration"], "state": 2, "file_id": 69, "knowledge_revision": 263, "git_revision": "", "filename": "/home/kavia/workspace/code-generation/campusschedpro-95046-95052/main_container_for_campus_sched_pro/build/static/js/main.7e127eb7.js.map", "hash": null, "format-version": 4, "code-base-name": "default", "revision_history": [{"263": ""}]}